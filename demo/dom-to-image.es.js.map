{"version":3,"file":"dom-to-image.es.js","sources":["../src/utils/type.ts","../src/utils/index.ts","../src/utils/xhr.ts","../src/process-style.ts","../src/process-image.ts","../src/cloneNode.ts","../src/process-font.ts","../src/index.ts","../src/createSvg.ts"],"sourcesContent":["export enum FILE_ENUM_TYPE {\n  WOFF = 'application/font-woff',\n  TTF = 'application/font-truetype',\n  EOT = 'image/eotapplication/vnd.ms-fontobject',\n  GIF = 'image/gif',\n  TIFF = 'image/tiff',\n  SVG = 'image/svg+xml',\n  JPEG = 'image/jpeg',\n  JPG = 'image/jpeg',\n  PNG = 'image/png',\n  WEBP = 'image/webp',\n}","\nimport { xhr } from './xhr';\nimport { FILE_ENUM_TYPE } from \"./type\";\n\nexport const URL_REGEX = /url\\(['\"]?([^'\"]+?)['\"]?\\)/g;\n/**\n * 转义字符串(针对特定符号)\n * @param props  string\n * @returns string\n */\nexport const escape = (props: string) => props.replace(/([.*+?^${}()|\\[\\]\\/\\\\])/g, '\\\\$1');\n/**\n * 延迟\n * @param delayTime 延迟时间（毫秒）\n */\nexport const delay = (delayTime: number) => {\n  return (args: unknown) => new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(args)\n    }, delayTime)\n  })\n}\nexport const uid = () => {\n  let index = 0;\n  /* see http://stackoverflow.com/a/6248722/2519373 */\n  const fourNumberRandom = `0000${(Math.random() * Math.pow(36, 4) << 0).toString(36)}`.slice(-4)\n  return `u0000${fourNumberRandom}${index++}`\n}\n/**\n * 数组化\n * @param arrayLike \n * @returns array\n */\nexport const asArray = (arrayLike: any) => {\n  const array: any = [];\n  for (const item of arrayLike) {\n    array.push(item);\n  }\n  return array\n}\n/**\n *  转义 Xhtml\n * @param props String\n * @returns \n */\nexport const escapeXhtml = (props: string) => props.replace(/#/g, '%23').replace(/\\n/g, '%0A');\n/**\n *  处理stylePropertyValue带px\n * @param node HTMLElement\n * @param styleProperty  string\n * @return number\n */\nexport const px = (node: HTMLElement, styleProperty: string) => {\n  const val = window.getComputedStyle(node).getPropertyValue(styleProperty)\n  return parseFloat(val.replace('px', ''))\n}\nexport const width = (node: HTMLElement) => {\n  const leftBorder = px(node, 'border-left-width');\n  const rightBorder = px(node, 'border-right-width');\n  return node.scrollWidth + leftBorder + rightBorder;\n}\n\nexport const height = (node: HTMLElement) => {\n  const topBorder = px(node, 'border-top-width');\n  const bottomBorder = px(node, 'border-bottom-width');\n  return node.scrollHeight + topBorder + bottomBorder;\n}\n\nexport const dataAsBase64Url = (content: string, type: FILE_ENUM_TYPE) => `data:${type};base64,${content}`\n\n/**\n * 解析URL扩展\n * @param url string\n */\nexport const parseExtension = (url: string) => {\n  const match = /\\.([^\\.\\/]*?)$/g.exec(url);\n  return match ? match[1] : ''\n}\n\n/**\n * 判断字符串是否已 data:开头\n * @param url \n * @returns {boolean}\n */\nexport const isDataUrl = (url: string) => {\n  return url.search(/^(data:)/) !== -1;\n}\n\n/**\n * URL正则\n * @param url \n * @returns {RegExpConstructor}\n */\nexport const urlAsRegex = (url: string) => {\n  return new RegExp('(url\\\\([\\'\"]?)(' + escape(url) + ')([\\'\"]?\\\\))', 'g');\n}\n\n/**\n * 检查字符串内是否存在 URL 文件资源\n * @param str \n * @returns \n */\nexport const checkStrUrl = (str: string) => str.search(URL_REGEX) !== -1\n\n/**\n * 读取字符并解析出其中 URL\n * @param string \n * @returns {Array}\n */\nexport const readUrls = (string: string) => {\n  const result: any = [];\n  let match;\n  while ((match = URL_REGEX.exec(string)) !== null) {\n    result.push(match[1]);\n  }\n  return result.filter(function (url: string) {\n    return !isDataUrl(url);\n  });\n}\n\n/**\n * 返回文件的类型\n * @param url string  文件 URL\n * @returns  string\n */\nexport const ParsefileType = (url: string) => {\n  const extension = parseExtension(url).toLocaleUpperCase()\n  return FILE_ENUM_TYPE[extension] || ''\n}\n\n/**\n * canvas转Blob\n * @param canvas \n * @returns \n */\nexport const toBlob = (canvas: HTMLCanvasElement) => {\n  return new Promise(resolve => {\n    const binaryString = window.atob(canvas?.toDataURL().split(',')[1]);\n    const length = binaryString.length;\n    const binaryArray = new Uint8Array(length);\n    for (let i = 0; i < length; i++)\n      binaryArray[i] = binaryString.charCodeAt(i);\n\n    resolve(new Blob([binaryArray], {\n      type: 'image/png'\n    }));\n  });\n}\n\n/**\n * 生成新的 URL\n * @param url \n * @param baseUrl \n * @returns \n */\nexport const createLinkUrl = (url: string, baseUrl: string): string => {\n  const doc = document.implementation.createHTMLDocument();\n  const base = doc.createElement('base');\n  doc.head.appendChild(base);\n  const a = doc.createElement('a');\n  doc.body.appendChild(a);\n  base.href = baseUrl;\n  a.href = url;\n  console.log(url);\n  return a.href;\n}\n\n/**\n * 读取Url 文件并转成Base64字符串\n * @param {Object} props \n@return {Promise}\n */\nexport const readUrlFileToBase64 = (props: {\n  url: string,\n  httpTimeout?: number,\n  cacheBust?: boolean,\n  useCredentials?: boolean,\n  imagePlaceholder?: string  // base64\n}): Promise<any> => xhr({\n  ...props, successHandle: (request: { response: Blob; }, resolve: (arg0: string | ArrayBuffer | null) => void) => {\n    const reader = new FileReader();\n    // 该事件在读取操作结束时（\n    reader.onloadend = function () {\n      let content = reader.result;\n      // if (content && typeof content === 'string') content = content.split(/,/)[1]\n      resolve(content);\n    };\n    reader.onerror = (err) => {\n      console.error('img url reader fail',err)\n    }\n    // 开始读取指定的Blob中的内容。一旦完成，result属性中将包含一个data: URL 格式的 Base64 字符串以表示所读取文件的内容。\n    reader.readAsDataURL(request.response);\n  }\n})\n\n/**\n * 检测字符内所有的url File,并转成内联的 base64地址\n * @param {string} str \n * @param {string} baseUrl \n * @returns {Promise<string>}\n */\nexport const checkStrUrlFile = (str: string, baseUrl?: string) => {\n  if (!checkStrUrl(str)) return Promise.resolve(str);;\n  console.log(str, baseUrl);\n  const urls =  readUrls(str);\n  let done = Promise.resolve(str);\n  urls.forEach((url: string) => {\n    done = done.then(async str => {\n      url = baseUrl ? createLinkUrl(url, baseUrl) : url;\n      const content: string = await readUrlFileToBase64({ url: url })\n      console.log(content);\n      return str.replace(urlAsRegex(url), '$1' + content + '$3');\n    })\n  })\n  return done;\n}","/**\n *  XMLHttpRequest\n * @param props \n * @returns \n */\nexport const xhr = (props: {\n  url: string,\n  httpTimeout?: number,\n  cacheBust?: boolean, // 是否绕过缓存\n  useCredentials?: boolean, // 是否跨域\n  successHandle?: Function,\n  failHandle?: Function\n}) => {\n  let { url } = props;\n  const {\n    httpTimeout = 30000,\n    cacheBust = false,\n    useCredentials = false,\n    successHandle = () => { },\n    failHandle = () => { },\n  } = props;\n  if (cacheBust) {\n    // Cache bypass so we dont have CORS issues with cached images \n    // Source: https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache\n    url += (/\\?/.test(url) ? '&' : '?') + new Date().getTime();\n  }\n  return new Promise(function (resolve) {\n    const request = new XMLHttpRequest();\n    request.onreadystatechange = handle;\n    request.ontimeout = () => fail(`timeout of ${httpTimeout}ms occured while fetching resource: ${url}`);;\n    request.responseType = 'blob';\n    request.timeout = httpTimeout;\n    if (useCredentials) request.withCredentials = true; // 如果服务端设置了\"Access-Control-Allow-Origin\": \"*\"，客户端请求时无需再设置withCredentials: true\n    request.open('GET', url, true);\n    request.send();\n\n    function handle() {\n      if (request.readyState !== 4) return;\n      if (request.status === 200) {\n        successHandle(request, resolve)\n      } else {\n        failHandle();\n        fail('cannot fetch resource: ' + url + ', status: ' + request.status);\n        return;\n      }\n\n    }\n    function fail(message: string) {\n      console.error(message);\n      resolve('');\n    }\n  });\n}","import * as util from \"./utils\";\nimport { formCloneElementValue,fixSvg} from './cloneNode'\n/**\n *  设置克隆元素样式\n * @param  {CSSStyleDeclaration} sourceNodeCssStyle\n * @param  {CSSStyleDeclaration} cloneNodeCssStyle \n */\nexport const setCloneNodeStyleProperty = (sourceNodeCssStyle: CSSStyleDeclaration, cloneNodeCssStyle: CSSStyleDeclaration) => {\n  if (sourceNodeCssStyle.cssText) {\n    cloneNodeCssStyle.cssText = sourceNodeCssStyle.cssText\n  } else {\n    for (const key of sourceNodeCssStyle) {\n      if (sourceNodeCssStyle.getPropertyValue(key)) {\n        cloneNodeCssStyle.setProperty(key,\n          sourceNodeCssStyle.getPropertyValue(key),\n          sourceNodeCssStyle.getPropertyPriority(key)\n        );\n      }\n    }\n  }\n}\n\n\n/**\n *  检测图片元素和样式内的背景图，并转换为内联的 Base64形式\n * @param node HTMLELment\n */\nexport const checkElementImgToInline = async (node: HTMLElement) => {\n \n  if (node.style) {\n    const background = node.style.getPropertyValue('background');\n    if (!background) return node;\n    const value = await util.checkStrUrlFile(background);\n    if (value) node.style.setProperty('background', value, node.style.getPropertyPriority('background'));\n  }\n  const arr = Array.prototype.slice.call(node.childNodes).filter(child => child.nodeType === 1)\n  await Promise.all(\n    arr.map((child: HTMLElement) => {\n      return checkElementImgToInline(child);\n    })\n  )\n  return node;\n}\n\n/**\n * 处理元素伪类情况\n * @param {HTMLElement} original  原元素\n * @param {HTMLElement} clone  克隆元素（目标对象）\n */\nexport const processNodePseudoStyle = (original: HTMLElement, clone: HTMLElement) => {\n  if (!(clone instanceof Element)) return clone;\n  const eachPseudoStyles = () => [':before', ':after'].forEach(item => nodePseudoStyle(item));\n  /**\n   * 处理伪类\n   * @param pseudoName 指定一个要匹配的伪元素的字符串 如:before\n   * @returns {void}\n   */\n  function nodePseudoStyle(pseudoName: string) {\n    const style = window.getComputedStyle(original, pseudoName);\n    const content = style.getPropertyValue('content');\n    if (content === '' || content === 'none') return;\n    const className = util.uid();\n    clone.className = clone.className + ' ' + className;\n    const styleElement = document.createElement('style');\n    styleElement.appendChild(getFormatPseudoStyle(className, pseudoName, style));\n    clone.appendChild(styleElement);\n  }\n \n  return Promise.resolve()\n    .then(() => setCloneNodeStyleProperty(window.getComputedStyle(original), clone.style))\n    .then(eachPseudoStyles)\n    .then(()=>formCloneElementValue(clone,original))\n    .then(() => fixSvg(clone))\n    .then(() => clone)\n}\n\n/**\n * 处理原始背景外联资源\n * @param node \n * @returns {void}\n */\nexport const processNodeBackground =async (node: HTMLElement) => {\n  if (node.style) {\n    const background = node.style.getPropertyValue('background');\n    if (!background) return node;\n    const value = await util.checkStrUrlFile(background);\n    if (value) node.style.setProperty('background', value, node.style.getPropertyPriority('background'));\n  }\n}\n\n/**\n *  获取格式化后的TextNode\n * @param {string} className 样式名\n * @param {string} pseudoName 伪类名称 \n * @param {CSSStyleDeclaration} style 样式声明对象\n * @returns {TextNode}\n */\nfunction getFormatPseudoStyle(className: string, pseudoName: string, style: CSSStyleDeclaration) {\n  const selector = `.${className}:${pseudoName}`;\n  const content = style.getPropertyValue('content');\n  let cssText = '';\n  if (style.cssText) {\n    cssText = `${style.cssText} content: ${content};`\n  } else {\n    for (const key of style) {\n      cssText += `${key}:${style.getPropertyValue(key)}${style.getPropertyPriority(key) ? ' !important' : ''};`\n    }\n  }\n  return document.createTextNode(`${selector}{${cssText}}`);\n}","import * as util from './utils';\nimport { processNodeBackground } from './process-style'\n/**\n * 创建image\n * @param url img url base64 or  url\n * @returns {Promise<HTMLImageElement>}\n */\nexport const createImage = (url: string): Promise<any> => {\n  if (url === 'data:,') return Promise.resolve(null)\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    // 处理跨域图片，注意：IOS 不支持该属性\n    img.crossOrigin = 'anonymous';\n    img.onload = () => {\n      resolve(img);\n    }\n    img.onerror = reject\n    img.src = url;\n  })\n}\n\n \n\n/**\n *  检测图片元素和样式内的背景图，并转换为内联的 Base64形式\n * @param node HTMLELment\n */\nexport const checkElementImgToInline = async (node: HTMLElement) => {\n  if (node instanceof HTMLImageElement) return await imgSrcToInlineBase64(node);\n  await processNodeBackground(node)\n  const arr = Array.prototype.slice.call(node.childNodes).filter(child => child.nodeType === 1)\n  await Promise.all(\n    arr.map((child: HTMLElement) => checkElementImgToInline(child))\n  )\n  return node;\n}\n\n/**\n * 图片src地址转换成Base64并重新赋值给图片\n * @param {HTMLImageElement} element \n * @returns {Promise<string>}\n */\nasync function imgSrcToInlineBase64(element: HTMLImageElement): Promise<any> {\n  if (!util.isDataUrl(element.src)) { \n    const base64 = await util.readUrlFileToBase64({ url: element.src })\n    return new Promise(function (resolve, reject) {\n      element.onload = resolve;\n      element.onerror = reject;\n      element.src = base64;\n    });\n  }\n}\n","import { createImage } from './process-image';\nimport { processNodePseudoStyle } from './process-style';\n\n/**\n * 克隆元素\n * @param {HTMLElement} node \n * @param {Function} filter\n * @param {boolean} root \n * @returns \n */\nexport const cloneNode = async (node: HTMLElement, filter?: Function, root = false) => {\n  if (!root && filter && !filter(node)) return;\n  var children = node.childNodes;\n  const clone: any = node instanceof HTMLCanvasElement ? await createImage(node.toDataURL()) : node.cloneNode(false)\n  processNodePseudoStyle(node, clone)\n  if (children.length === 0) return clone;\n  for (const child of children) {\n    cloneNode(child as HTMLElement, filter)\n      .then((childClone: any) => {\n        if (childClone) {\n          clone.appendChild(childClone)\n        }\n      })\n  }\n  return clone\n}\n\n/**\n * 处理表单元素\n * @param {HTMLElement} clone  克隆元素（目标对象）\n * @param {HTMLElement} original  原元素\n */\nexport const formCloneElementValue = (clone: HTMLElement, original: HTMLElement) => {\n  if (original instanceof HTMLTextAreaElement) clone.innerHTML = original.value;\n  if (original instanceof HTMLInputElement) clone.setAttribute(\"value\", original.value);\n}\n\n\n/**\n * 处理SVG\n * @param clone \n * @returns \n */\nexport const fixSvg = (clone: HTMLElement) => {\n  if (!(clone instanceof SVGElement)) return;\n  clone.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n  if (!(clone instanceof SVGRectElement)) return;\n  ['width', 'height'].forEach((attribute) => {\n    var value = clone.getAttribute(attribute);\n    if (!value) return;\n    clone.style.setProperty(attribute, value);\n  });\n}","import * as util from './utils';\n/**\n * 处理嵌入字体\n * @param node \n * @returns \n */\nexport const processFonts = (node: HTMLElement) => {\n \n  const pNewFonts = readAllFont(document.styleSheets)\n  const cssText = Promise.all(\n    pNewFonts.map((webFont: { resolve: () => Promise<any>; }) => webFont.resolve()))\n    .then((cssStrings: any[]) => cssStrings.join('\\n'));\n\n  return cssText.then((cssText: string) => {\n    const styleNode = document.createElement('style');\n    node.appendChild(styleNode);\n    styleNode.appendChild(document.createTextNode(cssText));\n    return node;\n  });\n}\n\n/**\n * 解析 document.styleSheets返回新的font\n * @param styleSheets \n * @returns {Array} newFont\n */\nfunction readAllFont (styleSheets: StyleSheetList) {\n  let newFonts: any = []\n  const cssRules: Array<any> = []\n  for (const sheet of styleSheets) {\n    for (const cssRule of sheet.cssRules) {\n      cssRules.push.bind(cssRule, sheet.cssRules)\n    }\n  }\n  const newWebFont = (rule: { parentStyleSheet: any; cssText: any; style: { getPropertyValue: (arg0: string) => string; }; }) => {\n    const resolve = () => util.checkStrUrlFile(rule.cssText, (rule.parentStyleSheet || {}).href);\n    const src = () => rule.style.getPropertyValue('src')\n    return { resolve, src };\n  }\n  try {\n    for (const rule of cssRules) {\n      if (rule.type === CSSRule.FONT_FACE_RULE) {\n        newFonts.push(newWebFont(rule))\n      } else if (util.checkStrUrl(rule.style.getPropertyValue('src'))) {\n        newFonts.push(newWebFont(rule))\n      }\n    }\n  } catch (e) {\n    console.log('Error while reading CSS rules from ' + styleSheets, e);\n  }\n  return newFonts;\n}","import * as util from './utils';\nimport { cloneNode } from './cloneNode';\nimport { processFonts } from './process-font';\nimport { createImage, checkElementImgToInline } from './process-image';\nimport { createSvgEncodeUrl } from './createSvg';\nimport { FILE_ENUM_TYPE } from './utils/type';\ninterface RenderOptions {\n  targetNode: HTMLElement; // 目标node\n  width?: number; // 呈现前应用于节点的宽(以像素为单位)\n  height?: number; // 呈现前应用于节点的高(以像素为单位)\n  bgColor?: string; // 背景色色值\n  style?: CSSStyleDeclaration; // css对象集合\n  filter?: Function; // 一个以 DOM 节点为参数的函数，如传入节点要包含在输出中则返回 true （排除节点同时也包含子节点），不能是根节点\n  quality?: number; // 一个介于0和1之间的数字，表示 JPEG 图像的图像质量(例如0.92 = > 92%)\n  imagePlaceholder?: string; // 占位符图像的数据 URL，在获取图像失败时将使用该 URL。默认值为未定义，并将对失败的映像抛出错误\n  cacheBust?: boolean; // 设置为 true 可将当前时间作为查询字符串追加到 URL 请求以启用缓存崩溃\n  useCredentials?: boolean;  // 对外部 URI（CORS 请求）使用（现有）身份验证凭据\n  httpTimeout?: number; // 设置 resolve 超时时间，单位单位秒\n  scale?: number; // 自定义图像缩放比例,用于保障图像质量\n}\n\n\nexport default class DomToImage {\n  public options;\n  /**\n   * constructor\n   * @param props 渲染参数\n   */\n  constructor(options: RenderOptions) {\n    const defaultValue = { quality: 1, cacheBust: false, useCredentials: false, httpTimeout: 30000, scale: window.devicePixelRatio }\n    this.options = { ...defaultValue, ...options };\n  }\n\n  toSvg() {\n    return Promise.resolve()\n      .then((): any => cloneNode(this.options.targetNode, this.options.filter, true))\n      .then(processFonts)\n      .then(checkElementImgToInline) // 图片和背景图转内联形式\n      .then(this.applyOptions.bind(this))\n      .then(clone => {\n        clone.setAttribute('style', '')\n        return createSvgEncodeUrl(clone,\n          this.options.width || util.width(this.options.targetNode),\n          this.options.height || util.height(this.options.targetNode)\n        );\n      })\n  }\n\n  toPng() {\n    return this.drawCanvas()\n      .then(canvas => canvas.toDataURL(FILE_ENUM_TYPE.PNG, this.options.quality));\n  }\n\n  toJpg() {\n    return this.drawCanvas()\n      .then(canvas => canvas.toDataURL(FILE_ENUM_TYPE.JPG, this.options.quality));\n  }\n\n  toCanvas() {\n    return this.drawCanvas()\n      .then(canvas => canvas);\n  }\n\n  toBlob() {\n    return this.drawCanvas()\n      .then((canvas) => {\n        if (canvas.toBlob)\n          return new Promise(function (resolve) {\n            canvas.toBlob(resolve);\n          });\n        return util.toBlob(canvas);\n      });\n  }\n\n  toPixelData() {\n    return this.drawCanvas()\n      .then(canvas => {\n        return canvas.getContext('2d')?.getImageData(0, 0, util.width(this.options.targetNode), util.height(this.options.targetNode)).data;\n      });\n  }\n\n  private drawCanvas() {\n    return this.toSvg()\n      .then(createImage)\n      .then(util.delay(100))\n      .then((image: any) => {\n        const canvas = this.creatCanvas();\n        const context = canvas.getContext('2d')\n        if (context) context.drawImage(image, 0, 0, canvas.width, canvas.height);\n        return canvas;\n      })\n  }\n  /**\n   * 传入的样式属性赋值到克隆元素\n   * @param {HTMLElement} clone \n   * @returns \n   */\n  private applyOptions(clone: HTMLElement) {\n    if (this.options.bgColor) clone.style.backgroundColor = this.options.bgColor;\n    if (this.options.width) clone.style.width = this.options.width + 'px';\n    if (this.options.height) clone.style.height = this.options.height + 'px';\n    const styles = this.options.style\n    for (const style in styles) {\n      clone.style[style] = styles[style];\n    }\n    return clone;\n  }\n\n  private creatCanvas() {\n    const canvas = document.createElement('canvas');\n    canvas.width = (this.options.width || util.width(this.options.targetNode)) * this.options.scale;\n    canvas.height = (this.options.height || util.height(this.options.targetNode)) * this.options.scale;\n    if (this.options.bgColor) {\n      const ctx = canvas.getContext('2d');\n      if (ctx) {\n        ctx.fillStyle = this.options.bgColor;\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n      }\n    }\n    return canvas;\n  }\n}","import * as util from './utils';\n/**\n * 生成 SVG，base64\n * @param {Object} node \n * @param {Object} width\n * @param {Object} height\n */\nexport const createSvgEncodeUrl = (node: HTMLElement, width: number, height: number) => {\n  return Promise.resolve(node)\n    .then(node => {\n      node.setAttribute('xmlns', 'http://www.w3.org/1999/xhtml');\n      return new XMLSerializer().serializeToString(node);\n    })\n    .then(util.escapeXhtml)\n    .then(xhtml => `<foreignObject x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">${xhtml}</foreignObject>`)\n    .then(foreignObject => `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${width}\" height=\"${height}\">${foreignObject}</svg>`)\n    .then(svg => `data:image/svg+xml;charset=utf-8,${svg}`);\n}"],"names":["FILE_ENUM_TYPE","URL_REGEX","escapeXhtml","props","replace","px","node","styleProperty","val","window","getComputedStyle","getPropertyValue","parseFloat","width","leftBorder","rightBorder","scrollWidth","height","topBorder","bottomBorder","scrollHeight","isDataUrl","url","search","checkStrUrl","str","readUrlFileToBase64","httpTimeout","cacheBust","useCredentials","successHandle","failHandle","test","Date","getTime","Promise","resolve","request","XMLHttpRequest","fail","message","console","error","onreadystatechange","readyState","status","ontimeout","responseType","timeout","withCredentials","open","send","xhr","reader","FileReader","onloadend","content","result","onerror","err","readAsDataURL","response","checkStrUrlFile","baseUrl","urls","string","match","exec","push","filter","readUrls","done","forEach","then","__awaiter","doc","document","implementation","createHTMLDocument","base","createElement","head","appendChild","a","body","href","createLinkUrl","RegExp","urlAsRegex","processNodePseudoStyle","original","clone","Element","sourceNodeCssStyle","cloneNodeCssStyle","cssText","key","setProperty","getPropertyPriority","setCloneNodeStyleProperty","style","item","pseudoName","className","index","Math","random","pow","toString","slice","util.uid","styleElement","selector","createTextNode","getFormatPseudoStyle","nodePseudoStyle","formCloneElementValue","fixSvg","createImage","reject","img","Image","crossOrigin","onload","src","checkElementImgToInline","HTMLImageElement","element","util.isDataUrl","base64","util.readUrlFileToBase64","imgSrcToInlineBase64","background","value","util.checkStrUrlFile","processNodeBackground","arr","Array","prototype","call","childNodes","child","nodeType","all","map","cloneNode","root","children","HTMLCanvasElement","toDataURL","length","childClone","HTMLTextAreaElement","innerHTML","HTMLInputElement","setAttribute","SVGElement","SVGRectElement","attribute","getAttribute","processFonts","pNewFonts","styleSheets","newFonts","cssRules","sheet","cssRule","bind","newWebFont","rule","parentStyleSheet","type","CSSRule","FONT_FACE_RULE","util.checkStrUrl","e","readAllFont","webFont","cssStrings","join","styleNode","DomToImage","constructor","options","defaultValue","quality","scale","devicePixelRatio","this","Object","assign","toSvg","targetNode","applyOptions","XMLSerializer","serializeToString","util.escapeXhtml","xhtml","foreignObject","svg","createSvgEncodeUrl","util.width","util.height","toPng","drawCanvas","canvas","PNG","toJpg","JPG","toCanvas","toBlob","binaryString","atob","split","binaryArray","Uint8Array","i","charCodeAt","Blob","util.toBlob","toPixelData","getContext","_a","getImageData","data","delayTime","args","setTimeout","image","creatCanvas","context","drawImage","bgColor","backgroundColor","styles","ctx","fillStyle","fillRect"],"mappings":"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"}